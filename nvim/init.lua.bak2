require("lazy").setup(plugins, opts)

-- Install lazy
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
local is_bootstrap = false
if not vim.loop.fs_stat(lazypath) then
  is_bootstrap = true
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "--single-branch",
    "https://github.com/folke/lazy.nvim.git",
    lazypath,
  })
end
vim.opt.runtimepath:prepend(lazypath)

-- -- Install packer
-- local install_path = vim.fn.stdpath 'data' .. '/site/pack/packer/start/packer.nvim'
-- local is_bootstrap = false
-- if vim.fn.empty(vim.fn.glob(install_path)) > 0 then
--   is_bootstrap = true
--   vim.fn.execute('!git clone https://github.com/wbthomason/packer.nvim ' .. install_path)
--   vim.cmd [[packadd packer.nvim]]
-- end
--
-- require('packer').startup(function(use)
--   -- Package manager
--   use 'wbthomason/packer.nvim'
--
--   use { -- LSP Configuration & Plugins
--     'neovim/nvim-lspconfig',
--     requires = {
--       -- autocompletion
--       'hrsh7th/nvim-cmp',
--       'saadparwaiz1/cmp_luasnip',
--       'hrsh7th/cmp-buffer',
--       'hrsh7th/cmp-path',
--       'hrsh7th/cmp-nvim-lsp',
--       'hrsh7th/cmp-nvim-lsp-signature-help',
--
--       'j-hui/fidget.nvim',
--       'lukas-reineke/cmp-under-comparator',
--
--       -- snippets
--       'L3MON4D3/LuaSnip',
--       -- 'nvim-lua/lsp_extensions.nvim',
--       'rafamadriz/friendly-snippets',
--       'surmish/lua-style-snippets'
--     },
--   }
--
--   use { -- Highlight, edit, and navigate code
--     'nvim-treesitter/nvim-treesitter',
--     run = function()
--       pcall(require('nvim-treesitter.install').update { with_sync = true })
--     end,
--   }
--
--   use { -- Additional text objects via treesitter
--     'nvim-treesitter/nvim-treesitter-textobjects',
--     after = 'nvim-treesitter',
--   }
--
--   use "b0o/incline.nvim"
--
--   use 'nvim-lualine/lualine.nvim' -- Fancier statusline
--   use 'lukas-reineke/indent-blankline.nvim' -- Add indentation guides even on blank lines
--   use 'numToStr/Comment.nvim' -- "gc" to comment visual regions/lines
--   use 'tpope/vim-sleuth' -- Detect tabstop and shiftwidth automatically
--
--   -- Fuzzy Finder (files, lsp, etc)
--   use { 'nvim-telescope/telescope.nvim', branch = '0.1.x', requires = { 'nvim-lua/plenary.nvim' } }
--
--   -- Fuzzy Finder Algorithm which requires local dependencies to be built. Only load if `make` is available
--   use { 'nvim-telescope/telescope-fzf-native.nvim', run = 'make', cond = vim.fn.executable 'make' == 1 }
--
--   -- Add custom plugins to packer from ~/.config/nvim/lua/custom/plugins.lua
--   local has_plugins, plugins = pcall(require, 'custom.plugins')
--   if has_plugins then
--     plugins(use)
--   end
--
--   if is_bootstrap then
--     require('packer').sync()
--   end
-- end)
--
-- When we are bootstrapping a configuration, it doesn't
-- make sense to execute the rest of the init.lua.
--

-- -- Set lualine as statusline
-- -- See `:help lualine.txt`
-- require('lualine').setup {
--   options = {
--     icons_enabled = false,
--     globalstatus = true,
--     theme = 'everforest',
--     -- theme = 'onedark',
--     -- theme = 'OceanicNext',
--     -- theme = 'material',
--     component_separators = '|',
--     section_separators = '',
--   },
--   sections = {
--     lualine_x = {'filetype'}
--   },
-- }

-- -- Enable Comment.nvim
-- require('Comment').setup()

-- -- Enable `lukas-reineke/indent-blankline.nvim`
-- -- See `:help indent_blankline.txt`
-- require('indent_blankline').setup {
--   char = 'â”Š',
--   show_trailing_blankline_indent = false,
-- }

-- -- [[ Configure Telescope ]]
-- -- See `:help telescope` and `:help telescope.setup()`
-- require('telescope').setup {
--   defaults = {
--     mappings = {
--       i = {
--         ['<C-u>'] = false,
--         ['<C-d>'] = false,
--       },
--     },
--   },
-- }

-- -- Enable telescope fzf native, if installed
-- pcall(require('telescope').load_extension, 'fzf')

-- -- See `:help telescope.builtin`
-- vim.keymap.set('n', '<leader>?', require('telescope.builtin').oldfiles, { desc = '[?] Find recently opened files' })
-- vim.keymap.set('n', '<leader><space>', require('telescope.builtin').buffers, { desc = '[ ] Find existing buffers' })
-- vim.keymap.set('n', '<leader>/', function()
--   -- You can pass additional configuration to telescope to change theme, layout, etc.
--   require('telescope.builtin').current_buffer_fuzzy_find(require('telescope.themes').get_dropdown {
--     winblend = 10,
--     previewer = false,
--   })
-- end, { desc = '[/] Fuzzily search in current buffer]' })

-- vim.keymap.set('n', '<leader>sf', require('telescope.builtin').find_files, { desc = '[S]earch [F]iles' })
-- vim.keymap.set('n', '<leader>sh', require('telescope.builtin').help_tags, { desc = '[S]earch [H]elp' })
-- vim.keymap.set('n', '<leader>sw', require('telescope.builtin').grep_string, { desc = '[S]earch current [W]ord' })
-- vim.keymap.set('n', '<leader>sg', require('telescope.builtin').live_grep, { desc = '[S]earch by [G]rep' })
-- vim.keymap.set('n', '<leader>sd', require('telescope.builtin').diagnostics, { desc = '[S]earch [D]iagnostics' })

-- -- [[ Configure Treesitter ]]
-- -- See `:help nvim-treesitter`
-- require('nvim-treesitter.configs').setup {
--   -- Add languages to be installed here that you want installed for treesitter
--   ensure_installed = { 'c', 'cpp', 'lua', 'verilog', 'vim', 'json', 'bash', 'python', 'help' },

--   highlight = { enable = true },
--   indent = { enable = true },
--   incremental_selection = {
--     enable = true,
--     keymaps = {
--       init_selection = '<c-space>',
--       node_incremental = '<c-space>',
--       scope_incremental = '<c-s>',
--       node_decremental = '<c-backspace>',
--     },
--   },
--   textobjects = {
--     select = {
--       enable = true,
--       lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
--       keymaps = {
--         -- You can use the capture groups defined in textobjects.scm
--         ['aa'] = '@parameter.outer',
--         ['ia'] = '@parameter.inner',
--         ['af'] = '@function.outer',
--         ['if'] = '@function.inner',
--         ['ac'] = '@class.outer',
--         ['ic'] = '@class.inner',
--       },
--     },
--     move = {
--       enable = true,
--       set_jumps = true, -- whether to set jumps in the jumplist
--       goto_next_start = {
--         [']m'] = '@function.outer',
--         [']]'] = '@class.outer',
--       },
--       goto_next_end = {
--         [']M'] = '@function.outer',
--         [']['] = '@class.outer',
--       },
--       goto_previous_start = {
--         ['[m'] = '@function.outer',
--         ['[['] = '@class.outer',
--       },
--       goto_previous_end = {
--         ['[M'] = '@function.outer',
--         ['[]'] = '@class.outer',
--       },
--     },
--     swap = {
--       enable = true,
--       swap_next = {
--         ['<leader>a'] = '@parameter.inner',
--       },
--       swap_previous = {
--         ['<leader>A'] = '@parameter.inner',
--       },
--     },
--   },
-- }

-- require'lspconfig'.racket_langserver.setup{}

-- require'lspconfig'.pyright.setup{
--   capabilities = capabilities
-- }

-- require'lspconfig'.clangd.setup {
--   default_config = { 
--     capabilities = capabilities; 
--     cmd = { "clangd", "--background-index","--all-scopes-completion", "--pch-storage=memory", "--clang-tidy", "--suggest-missing-includes", "--cross-file-rename" }, 
--     filetypes = {"c", "cpp"}, 
--     init_options = { 
--       clangdFileStatus     = true,
--       usePlaceholders      = true,
--       completeUnimported   = true,
--       semanticHighlighting = false
--     }, 
--     root_dir = require'lspconfig'.util.root_pattern("compile_flags.txt") 
--     -- root_dir = require'lspconfig'.util.root_pattern("compile_flags.txt","apbld","compile_commands.json") 
--   }, 
--   on_attach = on_attach_common 
-- }

-- require'lspconfig'.rust_analyzer.setup({
--   on_attach=on_attach,
--   capabilities = capabilities,
--   settings = {
--     ["rust-analyzer"] = {
--       assist = {
--         importGranularity = "module",
--         importPrefix = "by_self",
--       },
--       cargo = {
--         loadOutDirsFromCheck = true
--       },
--       procMacro = {
--         enable = true
--       },
--     }
--   }
-- })

-- require('incline').setup()

-- -- Diagnostic keymaps
-- vim.keymap.set('n', '[d', vim.diagnostic.goto_prev)
-- vim.keymap.set('n', ']d', vim.diagnostic.goto_next)
-- vim.keymap.set('n', '<leader>e', vim.diagnostic.open_float)
-- vim.keymap.set('n', '<leader>q', vim.diagnostic.setloclist)

---- LSP settings.
----  This function gets run when an LSP connects to a particular buffer.
--local on_attach = function(_, bufnr)
--  -- NOTE: Remember that lua is a real programming language, and as such it is possible
--  -- to define small helper and utility functions so you don't have to repeat yourself
--  -- many times.
--  --
--  -- In this case, we create a function that lets us more easily define mappings specific
--  -- for LSP related items. It sets the mode, buffer and description for us each time.
--  local nmap = function(keys, func, desc)
--    if desc then
--      desc = 'LSP: ' .. desc
--    end

--    vim.keymap.set('n', keys, func, { buffer = bufnr, desc = desc })
--  end

--  nmap('<leader>rn', vim.lsp.buf.rename, '[R]e[n]ame')
--  nmap('<leader>ca', vim.lsp.buf.code_action, '[C]ode [A]ction')

--  nmap('gd', vim.lsp.buf.definition, '[G]oto [D]efinition')
--  nmap('gr', require('telescope.builtin').lsp_references, '[G]oto [R]eferences')
--  nmap('gI', vim.lsp.buf.implementation, '[G]oto [I]mplementation')
--  nmap('<leader>D', vim.lsp.buf.type_definition, 'Type [D]efinition')
--  nmap('<leader>ds', require('telescope.builtin').lsp_document_symbols, '[D]ocument [S]ymbols')
--  nmap('<leader>ws', require('telescope.builtin').lsp_dynamic_workspace_symbols, '[W]orkspace [S]ymbols')

--  -- See `:help K` for why this keymap
--  nmap('K', vim.lsp.buf.hover, 'Hover Documentation')
--  nmap('<C-k>', vim.lsp.buf.signature_help, 'Signature Documentation')

--  -- Lesser used LSP functionality
--  nmap('gD', vim.lsp.buf.declaration, '[G]oto [D]eclaration')
--  nmap('<leader>wa', vim.lsp.buf.add_workspace_folder, '[W]orkspace [A]dd Folder')
--  nmap('<leader>wr', vim.lsp.buf.remove_workspace_folder, '[W]orkspace [R]emove Folder')
--  nmap('<leader>wl', function()
--    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
--  end, '[W]orkspace [L]ist Folders')

--  -- Create a command `:Format` local to the LSP buffer
--  vim.api.nvim_buf_create_user_command(bufnr, 'Format', function(_)
--    if vim.lsp.buf.format then
--      vim.lsp.buf.format()
--    elseif vim.lsp.buf.formatting then
--      vim.lsp.buf.formatting()
--    end
--  end, { desc = 'Format current buffer with LSP' })
--end

---- nvim-cmp supports additional completion capabilities
--local capabilities = vim.lsp.protocol.make_client_capabilities()
--capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)

---- Turn on lsp status information
--require('fidget').setup()

--local ls      = require "luasnip"
--local lstypes = require "luasnip.util.types"
--require'luasnip'.config.set_config {
--  -- This tells LuaSnip to remember to keep around the last snippet.
--  -- You can jump back into it even if you move outside of the selection
--  history = true,

--  -- This one is cool cause if you have dynamic snippets, it updates as you type!
--  updateevents = "TextChanged,TextChangedI",

--  -- Autosnippets:
--  enable_autosnippets = true,

--  -- Crazy highlights!!
--  -- #vid3
--  -- ext_opts = nil,
--  ext_opts = {
--    [lstypes.choiceNode] = {
--      active = {
--        virt_text = { { "<-", "Error" } },
--      },
--    },
--  },
--}
--require("luasnip.loaders.from_vscode").lazy_load()

---- nvim-cmp setup
--local cmp = require 'cmp'
--local types = require'cmp.types'
--local luasnip_ok, luasnip = pcall(require, 'luasnip')

--cmp.setup {
--  snippet = {
--    expand = function(args)
--      if luasnip_ok then
--        luasnip.lsp_expand(args.body)
--      else
--        return
--      end
--    end,
--  },
--  mapping = cmp.mapping.preset.insert {
--    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
--    ['<C-f>'] = cmp.mapping.scroll_docs(4),
--    ['<C-Space>'] = cmp.mapping.complete(),
--    ['<CR>'] = cmp.mapping.confirm {
--      behavior = cmp.ConfirmBehavior.Replace,
--      select = true,
--    },
--    ['<Tab>'] = cmp.mapping(function(fallback)
--      if cmp.visible() then
--        cmp.select_next_item()
--      elseif luasnip.expand_or_jumpable() then
--        luasnip.expand_or_jump()
--      else
--        fallback()
--      end
--    end, { 'i', 'c', 's' }),
--    ['<S-Tab>'] = cmp.mapping(function(fallback)
--      if cmp.visible() then
--        cmp.select_prev_item()
--      elseif luasnip.jumpable(-1) then
--        luasnip.jump(-1)
--      else
--        fallback()
--      end
--    end, { 'i', 'c', 's' }),
--  },
--  sorting = {
--    comparators = {
--      cmp.config.compare.offset,
--      cmp.config.compare.exact,
--      cmp.config.compare.score,
--      require("cmp-under-comparator").under,
--      -- Same as cmp.config.compare.kind, but with the addition of preferring Variables over Text.
--      function(entry1, entry2)
--        local kind1 = entry1:get_kind()
--        kind1 = kind1 == types.lsp.CompletionItemKind.Text and 100 or kind1
--        kind1 = kind1 == types.lsp.CompletionItemKind.Variable and 1 or kind1
--        local kind2 = entry2:get_kind()
--        kind2 = kind2 == types.lsp.CompletionItemKind.Text and 100 or kind2
--        kind2 = kind2 == types.lsp.CompletionItemKind.Variable and 1 or kind2
--        if kind1 ~= kind2 then
--          if kind1 == types.lsp.CompletionItemKind.Snippet then
--            return true
--          end
--          if kind2 == types.lsp.CompletionItemKind.Snippet then
--            return false
--          end
--          local diff = kind1 - kind2
--          if diff < 0 then
--            return true
--          elseif diff > 0 then
--            return false
--          end
--        end
--      end,
--      cmp.config.compare.sort_text,
--      cmp.config.compare.length,
--      cmp.config.compare.order,
--    },
--    priority_weight = 100,
--  },
--  sources = cmp.config.sources({
--    { name = "path", priority_weight = 105 },
--    { name = "cmdline", priority_weight = 105 },
--    { name = "luasnip", max_item_count = 8, priority_weight = 103 },
--    { name = "nvim_lsp", max_item_count = 5, priority_weight = 100 },
--    { name = "nvim_lsp_signature_help", max_item_count = 5, priority_weight = 99 },
--    { name = "buffer", max_item_count = 5, priority_weight = 70 },
--  }),
--}
---- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
--cmp.setup.cmdline('/', {
--  sources = {
--  { name = 'buffer' }
--  }
--})
---- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
-- -- `:` cmdline setup.
--cmp.setup.cmdline(
--  ':', {
--    mapping = cmp.mapping.preset.cmdline(),
--    sources = cmp.config.sources(
--      {
--        { name = 'path' }
--      },
--      {
--        {
--          name = 'cmdline',
--          option = {
--            ignore_cmds = { 'Man', '!' }
--          }
--        }
--      })
--  }
--)


require("core")

-- The line beneath this is called `modeline`. See `:help modeline`
-- vim: ts=2 sts=2 sw=2 et
